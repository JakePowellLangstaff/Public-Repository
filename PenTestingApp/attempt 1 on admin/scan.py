import dns.resolver
import socket
import nmap3
from pythonping import ping
import subprocess
import xml.etree.ElementTree as ET

# DNS Resolution Function
def resolve_dns(domain):
    try:
        result = dns.resolver.resolve(domain, 'A')
        return '\n'.join([f'IP: {ipval.to_text()}' for ipval in result])
    except Exception as e:
        return f"Error resolving DNS: {e}"

# Nmap Setup 
nmap = nmap3.Nmap()

# Updated: Added optional parameters to control what scans to perform
def perform_full_scan(ip_addr, scan_ping=False, scan_tcp=False, scan_os=False, scan_vuln=False):
    results = {
        "ping": None,
        "os_info": None,
        "open_ports": None,
        "vulnerabilities": None
    }

   

    # validate and resolve hostnames to IP
    try:
        socket.inet_aton(ip_addr)
    except socket.error:
        try:
            ip_addr = socket.gethostbyname(ip_addr)
        except socket.gaierror:
            results["ping"] = f"Error: Unable to resolve hostname '{ip_addr}'"
            return results

    # Only do ping scan if user selected it
    if scan_ping:
        try:
            ping_result = ping(ip_addr, count=4)
            results["ping"] = [str(x) for x in ping_result]  # turn into list of strings
        except Exception as e:
            results["ping"] = f"Error pinging {ip_addr}: {e}"

    # Only do OS detection if selected
    if scan_os:  # tested
        try:
            os_results = nmap.nmap_os_detection(ip_addr)
            print("Full OS Results:", os_results)  # Debugging

            # Extract the data for the specific IP address
            if isinstance(os_results, dict):
                # Dynamically get the first key (IP address) in os_results
                ip_key = next(iter(os_results.keys()), None)
                if ip_key and isinstance(os_results[ip_key], dict):
                    ip_data = os_results[ip_key]
                    if "osmatch" in ip_data:
                        results["os_info"] = ip_data["osmatch"]
                    else:
                        #print("Key 'osmatch' not found in IP data")  # Debugging
                        results["os_info"] = []
                else:
                   # print("Unexpected structure in os_results for IP key")  # Debugging
                    results["os_info"] = []
            else:
             #   print("Unexpected structure in os_results")  # Debugging
                results["os_info"] = []

          #  print("Extracted OS Info:", results["os_info"])  # Debugging
        except Exception as e:
            results["os_info"] = f"Error scanning with Nmap OS detection: {e}"
          #  print(f"[ERROR] OS Scan: {e}")  # Debugging





  # Only do TCP/Port Scan if selected
    if scan_tcp:
        try:
            open_ports_results = nmap.nmap_version_detection(ip_addr)
          #  print("Full Open Ports Response:", open_ports_results)  # Debugging
            host_results = open_ports_results.get(ip_addr, {})
           # print("Host Results:", host_results)  # Debugging
            results["open_ports"] = host_results.get("ports", [])
           # print("Extracted Open Ports:", results["open_ports"])  # Debugging
        except Exception as e:
            results["open_ports"] = f"Error scanning ports with Nmap: {e}"
          #  print(f"[ERROR] TCP Scan: {e}")  # Debugging





   
    # Only do Vulnerability scan 
        # Vulnerability scan using raw Nmap output
    if scan_vuln:
        try:
            # Run Nmap with the vulners script and output as XML
            nmap_command = [
                "nmap",
                "--script", "vulners",
                "--script-args", "mincvss+4.0",
                "-oX", "-",  # Output as XML to stdout
                ip_addr
            ]
            nmap_output = subprocess.check_output(nmap_command, universal_newlines=True)
            print("Raw Nmap Output:", nmap_output)  # Debugging

            # Parse the XML output
            root = ET.fromstring(nmap_output)
            vuln_info = []

            for port in root.findall(".//port"):
                port_id = port.get("portid")
                service = port.find("service")
                service_name = service.get("name", "Unknown") if service is not None else "Unknown"
                product = service.get("product", "Unknown") if service is not None else "Unknown"

                port_vulns = []
                for script in port.findall("script"):
                    if script.get("id") == "vulners":
                        for table in script.findall("table"):
                            for elem in table.findall("elem"):
                                if elem.get("key") == "id":
                                    vuln_id = elem.text
                                elif elem.get("key") == "cvss":
                                    cvss = float(elem.text)
                                elif elem.get("key") == "href":
                                    href = elem.text
                                elif elem.get("key") == "is_exploit":
                                    is_exploit = elem.text == "true"

                                    port_vulns.append({
                                        "id": vuln_id,
                                        "cvss": cvss,
                                        "href": href,
                                        "is_exploit": is_exploit
                                    })

                vuln_info.append({
                    "port": port_id,
                    "service": service_name,
                    "product": product,
                    "vulnerabilities": port_vulns
                })

            results["vulnerabilities"] = vuln_info
        except subprocess.CalledProcessError as e:
            results["vulnerabilities"] = f"Error running Nmap: {e}"
        except ET.ParseError as e:
            results["vulnerabilities"] = f"Error parsing Nmap XML: {e}"

    print("=== RESULTS FROM SCAN.PY ===")
    print(results)
    return results
