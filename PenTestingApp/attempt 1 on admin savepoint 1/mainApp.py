from flask import Flask, render_template, request, redirect, session, url_for, flash
from werkzeug.security import generate_password_hash, check_password_hash
from flask_sqlalchemy import SQLAlchemy
from flask_admin import Admin
from flask_admin.contrib.sqla import ModelView
from scan import perform_full_scan
import socket

app = Flask(__name__, template_folder='html_files')
app.secret_key = "your_secret_key"

# Configure SQL Alchemy
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)



# Database Model acts as class model to link to the database pass the login html form data to the database ,
#single row within our DB
class User(db.Model):
    # Class Variables
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(25), unique=True, nullable=False)
    password_hash = db.Column(db.String(150), nullable=False)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

#Routes
@app.route("/")
def home():
    if "username" in session:
        return redirect(url_for("dashboard"))
    return render_template("login.html")

# Login
@app.route("/login", methods=["POST"])
def login():
    # Collect data from the login form
    username = request.form["username"]
    password = request.form["password"]

    # Query the database for the user
    print("Querying database for user:", username)  # Debugging before and after the query
    user = User.query.filter_by(username=username).first()
    print("Query result:", user)  # Debugging before and after the query

    if user:
        if user.check_password(password):  # Fixed method name
            session['username'] = username  # Store username in session
            return redirect(url_for("dashboard"))
        else:
            print("Incorrect password for user:", username)  # Terminal message
            flash("Incorrect password. Please try again.", "error")  # Frontend message
            return redirect(url_for("home"))  # Redirect to home to display flash messages
    else:
        print("User does not exist:", username)  # Terminal message
        flash("This user does not exist. Please register.", "error")  # Frontend message
        return redirect(url_for("home"))  # Redirect to home to display flash messages

@app.route("/register", methods=["POST"])
def register():
    username = request.form["username"]
    password = request.form["password"]

    # Check if the user already exists in the database
    user = User.query.filter_by(username=username).first()
    print(f"Checking if user '{username}' exists:", user)  # Debugging

    if user:
        print(f"User '{username}' already exists. Redirecting to login.")
        flash("Username already exists. Please choose a different username.", "error")
        return render_template("login.html")  # Display error on login page
    else:
        print(f"User '{username}' does not exist. Creating new user.")
        new_user = User(username=username)
        new_user.set_password(password)  # Ensure password is hashed
        db.session.add(new_user)
        try:
            db.session.commit()  # Commit the new user to the database
            print(f"User '{username}' committed to the database successfully.")
            session['username'] = username  # Store username in session
            return redirect(url_for("dashboard"))
        except Exception as e:
            print(f"Error committing to the database: {e}")
            flash("An error occurred while creating your account. Please try again.", "error")
            return render_template("login.html")  # Return to login page with error
    try:
        db.session.commit()  # Commit the new user to the database wrapping for debugging
    except Exception as e:
        print(f"Error committing to the database: {e}")
        session['username'] = username  # Store username in session
        print(f"User '{username}' created successfully.")
        return redirect(url_for("dashboard"))



# Dashboard 
@app.route("/dashboard")
def dashboard():
    if "username" in session:
        return render_template("dashboard.html", username=session["username"])
    return redirect(url_for("home"))

admin = Admin(app)
admin.add_view(ModelView(User, db.session))  # Add the User model to Flask-Admin

# Logout
@app.route("/logout")
def logout():
    session.pop("username", None)
    return redirect(url_for("home"))







@app.route("/process", methods=["POST"])
def process_scan():
    ip_or_domain = request.form["ip_address"]

    # Checkbox values
    scan_ping = "scan_ping" in request.form
    scan_tcp = "scan_tcp" in request.form
    scan_os = "scan_os" in request.form
    scan_vuln = "scan_vuln" in request.form
    scan_dns = "scan_dns" in request.form

    dns_data = None
    hostname = None

    if scan_dns:
        try:
            resolved = socket.gethostbyname_ex(ip_or_domain)
            dns_data = ', '.join(resolved[2])
            hostname = resolved[0]
        except Exception as e:
            print(f"[ERROR] DNS resolution error: {e}")

    results = None
    if scan_ping or scan_tcp or scan_os or scan_vuln:
        results = perform_full_scan(
            ip_or_domain,
            scan_ping=scan_ping,
            scan_tcp=scan_tcp,
            scan_os=scan_os,
            scan_vuln=scan_vuln
        )
        print("=== SCAN RESULTS ===")
        print(results)  # âœ… Log all the returned data in terminal

        # Debugging OS Info
        os_info = results.get("os_info") if results else None
        print("OS Info in mainApp.py:", os_info)  # Debugging
        

    # Extract data safely
    ping_result = results.get("ping") if results else None
    os_info = results.get("os_info") if results else None
    open_ports_info = results.get("open_ports") if results else None
    #print("Open Ports Info:", open_ports_info)  # Debugging
    vulnerability_info = results.get("vulnerabilities") if results else None
    print("VULN Info in mainApp.py:", vulnerability_info)  # Debugging
    return render_template(
        "results.html",
        the_data=ping_result,
        os_data=os_info,
        open_ports_results=open_ports_info,
        vulnerability_data=vulnerability_info,
        dns_data=dns_data,
        hostname=hostname,
        scan_ping=scan_ping,
        scan_tcp=scan_tcp,
        scan_os=scan_os,
        scan_vuln=scan_vuln,
        scan_dns=scan_dns
    )

#import os
#print("Database file location:", os.path.abspath('users.db')) # Debugging

if __name__ == "__main__":
    with app.app_context():  # Ensure the application context is active
        db.create_all()  # Initialize the database and create tables if they don't exist

    app.run(debug=True)
