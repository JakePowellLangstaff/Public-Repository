from flask import Flask, render_template, request, redirect, session, url_for, flash
from werkzeug.security import generate_password_hash, check_password_hash
from flask_sqlalchemy import SQLAlchemy
from flask_admin import Admin
from flask_admin.contrib.sqla import ModelView
from scan import perform_full_scan
import socket

app = Flask(__name__, template_folder='html_files')
app.secret_key = "your_secret_key"

# Configure SQL Alchemy
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# Database Model
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(25), unique=True, nullable=False)
    password_hash = db.Column(db.String(150), nullable=False)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

# Routes
@app.route("/")
def home():
    if "username" in session:
        return redirect(url_for("dashboard"))
    return render_template("login.html")

@app.route("/login", methods=["POST"])
def login():
    username = request.form["username"]
    password = request.form["password"]

    user = User.query.filter_by(username=username).first()
    if user and user.check_password(password):
        session['username'] = username
        session['password'] = password
        if username == "admin":  # Check if the user is the admin
            return redirect("/admin")  # Redirect to the admin panel
        return redirect(url_for("dashboard"))
    else:
        flash("Invalid username or password. Please try again.", "error")
        return redirect(url_for("home"))

@app.route("/register", methods=["POST"])
def register():
    username = request.form["username"]
    password = request.form["password"]

    user = User.query.filter_by(username=username).first()
    if user:
        flash("Username already exists. Please choose a different username.", "error")
        return render_template("login.html")
    else:
        new_user = User(username=username)
        new_user.set_password(password)
        db.session.add(new_user)
        try:
            db.session.commit()
            session['username'] = username
            return redirect(url_for("dashboard"))
        except Exception as e:
            print(f"Error committing to the database: {e}")
            flash("An error occurred while creating your account. Please try again.", "error")
            return render_template("login.html")

@app.route("/dashboard")
def dashboard():
    if "username" in session:
        return render_template("dashboard.html", username=session["username"])
    return redirect(url_for("home"))

# Custom ModelView to restrict access
class SecureModelView(ModelView):
    def is_accessible(self):
        if "username" in session:
            username = session.get("username")
            user = User.query.filter_by(username=username).first()
            if user and username == "admin" and user.check_password(session.get("password", "")):
                return True
        return False

    def inaccessible_callback(self, name, **kwargs):
        flash("You must be an admin to access this page.", "error")
        return redirect(url_for("home"))

# Replace ModelView with SecureModelView for admin panel
admin = Admin(app)
admin.add_view(SecureModelView(User, db.session))

@app.route("/logout")
def logout():
    session.pop("username", None)
    session.pop("password", None)
    return redirect(url_for("home"))

@app.route("/process", methods=["POST"])
def process_scan():
    ip_or_domain = request.form["ip_address"]

    scan_ping = "scan_ping" in request.form
    scan_tcp = "scan_tcp" in request.form
    scan_os = "scan_os" in request.form
    scan_vuln = "scan_vuln" in request.form
    scan_dns = "scan_dns" in request.form

    dns_data = None
    hostname = None

    if scan_dns:
        try:
            resolved = socket.gethostbyname_ex(ip_or_domain)
            dns_data = ', '.join(resolved[2])
            hostname = resolved[0]
        except Exception as e:
            print(f"[ERROR] DNS resolution error: {e}")

    results = None
    if scan_ping or scan_tcp or scan_os or scan_vuln:
        results = perform_full_scan(
            ip_or_domain,
            scan_ping=scan_ping,
            scan_tcp=scan_tcp,
            scan_os=scan_os,
            scan_vuln=scan_vuln
        )
        print("=== SCAN RESULTS ===")
        print(results)

    ping_result = results.get("ping") if results else None
    os_info = results.get("os_info") if results else None
    open_ports_info = results.get("open_ports") if results else None
    vulnerability_info = results.get("vulnerabilities") if results else None

    return render_template(
        "results.html",
        the_data=ping_result,
        os_data=os_info,
        open_ports_results=open_ports_info,
        vulnerability_data=vulnerability_info,
        dns_data=dns_data,
        hostname=hostname,
        scan_ping=scan_ping,
        scan_tcp=scan_tcp,
        scan_os=scan_os,
        scan_vuln=scan_vuln,
        scan_dns=scan_dns
    )

if __name__ == "__main__":
    with app.app_context():
        db.create_all()
    app.run(debug=True)
