from flask import Flask, render_template, request, redirect, session, url_for, flash
from werkzeug.security import generate_password_hash, check_password_hash
from flask_sqlalchemy import SQLAlchemy
from flask_admin import Admin 
from flask_admin.contrib.sqla import ModelView
from scan import perform_full_scan
import socket
from flask_admin import AdminIndexView
from flask_admin.base import expose



# Initialize Flask app and configure template folder
app = Flask(__name__, template_folder='html_files')
app.secret_key = "your_secret_key"  # Secret key for session management

# Configure SQLAlchemy for database interactions
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'  # SQLite database file
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)  # Initialize SQLAlchemy

# Database model for user accounts
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)  # Primary key
    username = db.Column(db.String(25), unique=True, nullable=False)  # Unique username
    password_hash = db.Column(db.String(150), nullable=False)  # Hashed password

    # Method to set a hashed password
    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    # Method to check if a password matches the stored hash
    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

# Database model for scan settings
class ScanSettings(db.Model):
    id = db.Column(db.Integer, primary_key=True)  # Primary key
    scan_name = db.Column(db.String(50), unique=True, nullable=False)  # Name of the scan
    is_enabled = db.Column(db.Boolean, default=True)  # Whether the scan is enabled

# Route for the home page
@app.route("/")
def home():
    # Redirect to dashboard if user is logged in, otherwise show login page
    if "username" in session:
        return redirect(url_for("dashboard"))
    return render_template("login.html")

# Route for handling login
@app.route("/login", methods=["POST"])
def login():
    username = request.form["username"]  # Get username from form
    password = request.form["password"]  # Get password from form

    # Query the database for the user
    user = User.query.filter_by(username=username).first()
    if user and user.check_password(password):  # Check if user exists and password is correct
        session['username'] = username  # Store username in session
        session['password'] = password  # Store password in session
        # Redirect admin to the dashboard instead of the admin panel
        return redirect(url_for("dashboard"))  
    else:
        flash("Invalid username or password. Please try again.", "error")  # Show error message
        return redirect(url_for("home"))

# Route for handling user registration
@app.route("/register", methods=["POST"])
def register():
    username = request.form["username"]  # Get username from form
    password = request.form["password"]  # Get password from form

    # Check if username already exists
    user = User.query.filter_by(username=username).first()
    if user:
        flash("Username already exists. Please choose a different username.", "error")
        return render_template("login.html")
    else:
        # Create a new user and save to the database
        new_user = User(username=username)
        new_user.set_password(password)
        db.session.add(new_user)
        try:
            db.session.commit()
            session['username'] = username  # Log the user in
            return redirect(url_for("dashboard"))
        except Exception as e:
            print(f"Error committing to the database: {e}")
            flash("An error occurred while creating your account. Please try again.", "error")
            return render_template("login.html")

# Route for the dashboard
@app.route("/dashboard")
def dashboard():
    # Show dashboard if user is logged in, otherwise redirect to home
    if "username" in session:
        return render_template("dashboard.html", username=session["username"])
    return redirect(url_for("home"))

# Custom ModelView to restrict access to admin panel
class SecureModelView(ModelView):
    def is_accessible(self):
        # Check if user is logged in and is an admin
        if "username" in session:
            username = session.get("username")
            user = User.query.filter_by(username=username).first()
            if user and username == "admin" and user.check_password(session.get("password", "")):
                return True
        return False

    def inaccessible_callback(self, name, **kwargs):
        # Redirect non-admin users to the home page with an error message
        if "username" in session:
            flash("You do not have permission to access this page.", "error")
        else:
            flash("You must be logged in to access this page.", "error")
        return redirect(url_for("home"))

# Initialize Flask-Admin and add models to the admin panel
admin = Admin(app)
admin.add_view(SecureModelView(User, db.session))  # Add User model to admin panel
admin.add_view(SecureModelView(ScanSettings, db.session))  # Add ScanSettings model to admin panel

# Route for managing scan settings
@app.route("/manage_scans", methods=["GET", "POST"])
def manage_scans():
    # Restrict access to admin users
    if "username" not in session or session.get("username") != "admin":
        flash("You must be an admin to access this page.", "error")
        return redirect(url_for("home"))

    if request.method == "POST":
        # Update scan settings based on form data
        for scan in ScanSettings.query.all():
            scan.is_enabled = request.form.get(scan.scan_name) == "on"
        db.session.commit()
        flash("Scan settings updated successfully.", "success")

    # Fetch all scan settings to display in the form
    scans = ScanSettings.query.all()
    return render_template("manage_scans.html", scans=scans, text_color="white")  # Pass text color as white

# Route for logging out
@app.route("/logout")
def logout():
    # Clear session data and redirect to home
    session.pop("username", None)
    session.pop("password", None)
    return redirect(url_for("home"))

# Route for processing a scan
@app.route("/process", methods=["POST"])
def process_scan():
    ip_or_domain = request.form["ip_address"]  # Get IP or domain from form

    # Check which scans are enabled
    scan_ping = "scan_ping" in request.form and ScanSettings.query.filter_by(scan_name="Ping Scan", is_enabled=True).first()
    scan_tcp = "scan_tcp" in request.form and ScanSettings.query.filter_by(scan_name="TCP Scan", is_enabled=True).first()
    scan_os = "scan_os" in request.form and ScanSettings.query.filter_by(scan_name="OS Detection", is_enabled=True).first()
    scan_vuln = "scan_vuln" in request.form and ScanSettings.query.filter_by(scan_name="Vulnerability Scan", is_enabled=True).first()
    scan_dns = "scan_dns" in request.form and ScanSettings.query.filter_by(scan_name="DNS Resolution", is_enabled=True).first()

    dns_data = None
    hostname = None

    # Perform DNS resolution if enabled
    if scan_dns:
        try:
            resolved = socket.gethostbyname_ex(ip_or_domain)
            dns_data = ', '.join(resolved[2])  # Resolved IPs
            hostname = resolved[0]  # Hostname
        except Exception as e:
            print(f"[ERROR] DNS resolution error: {e}")

    results = None
    # Perform scans if any are enabled
    if scan_ping or scan_tcp or scan_os or scan_vuln:
        results = perform_full_scan(
            ip_or_domain,
            scan_ping=bool(scan_ping),
            scan_tcp=bool(scan_tcp),
            scan_os=bool(scan_os),
            scan_vuln=bool(scan_vuln)
        )
        print("=== SCAN RESULTS ===")
        print(results)

    # Extract scan results
    ping_result = results.get("ping") if results else None
    os_info = results.get("os_info") if results else None
    open_ports_info = results.get("open_ports") if results else None
    vulnerability_info = results.get("vulnerabilities") if results else None

    # Render results page with scan data
    return render_template(
        "results.html",
        the_data=ping_result,
        os_data=os_info,
        open_ports_results=open_ports_info,
        vulnerability_data=vulnerability_info,
        dns_data=dns_data,
        hostname=hostname,
        scan_ping=bool(scan_ping),
        scan_tcp=bool(scan_tcp),
        scan_os=bool(scan_os),
        scan_vuln=bool(scan_vuln),
        scan_dns=bool(scan_dns),
        username=session.get("username")  # Pass username to the template
    )

# Main entry point
if __name__ == "__main__":
    with app.app_context():
        db.create_all()  # Create database tables if they don't exist

        # Add default scan settings if not already present
        default_scans = ["Ping Scan", "TCP Scan", "OS Detection", "Vulnerability Scan", "DNS Resolution"]
        for scan in default_scans:
            if not ScanSettings.query.filter_by(scan_name=scan).first():
                db.session.add(ScanSettings(scan_name=scan))
        db.session.commit()

    app.run(debug=True)  # Run the app in debug mode
